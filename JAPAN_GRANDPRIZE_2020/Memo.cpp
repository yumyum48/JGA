/******************************************************************** 



********************「・」の行はとても読んで欲しいです！()の中には理由が描いてあるだけです！読まなくてもいいです！************************************************



-・変数のルールについて-------------------------------------------------
    ・最初の文字は必ず小文字！グローバル変数であろうと小文字です!
   　単語が切れて、次の単語を書く際、大文字( _(ハイフン) )にすると分かりやすいです！例 int g_aFlg : int g_a_Flg　
        (関数なのかどうかを即判断するために小文字にしています。g_がついてても小文字なのは気持ち悪いからです。)

    ・意味のある変数名にしましょう!
        (変数名をX、Yなどにするとスコープ的には大丈夫だと思いますが、なんのX？Y？事件が発生します。どうしてもそれにする場合はコメント文で書いてください！)

    ・グローバル変数はできるだけ使わないようにプログラムを工夫しましょう!※1
        (もちろん、絶対に使わないわけではないですが今のうちにゴリ押し病は直しておくと得をすると思います！)
        ※１: グローバル変数を絶対使わないとなると、メンテナンス性が落ちる可能性があるのでそこは頭に入れておいてください！
  
    ・bool型で宣言する場合は、TRUE、FALSEでどう変化するのかしっかりコメント文で書きましょう！ 例 bool flg // TRUE: 起動 | FALSE: 停止
        (コメントで書いてくれると別のところでその変数を見ても説明がついてきてくれるのでとても分かりやすくなります！)

--------------------------------------------------------------------------------------------------------------------------
 -・関数のルールについて-------------------------------------------------
    ・単語の最初の文字は必ず大文字です！ 例 GameMain
        (変数かどうかを即判断するためです!)

    ・仮引数は意味のある仮引数名にしてください！　例 PlayerHit(int px, int py);
        (意味が分からない場合、どういうものを入れていいのかわからないです！)

    ・戻り値がある場合は、その戻り値でなにをするのかしっかりコメント文で書きましょう！ 例 int Game() // 0: 停止した | 1: 起動した
        (コメントで書いてくれると別のところでその関数を見ても説明がついてきてくれるのでとても分かりやすくなります！)
--------------------------------------------------------------------------------------------------------------------------
********************************************************************/
/********************************************************************

・グローバル変数の説明(メインにあるもの)
-------------------------------------------------------
mouse型 『g_mouseInfo』

    説明しよう！ [マウスが押されている、離されている、X座標がどこか、Y座標がどこかを格納する変数です！押された瞬間を取ることも可能です！]
    
    メンバの紹介 {
        int mouseX, mouseY;
        int oldMouse, nowMouse, MouseFlg;}
    〜使い方〜
        if(g_mouseInfo.nowMouse & PAD_INPUT_A)  // Aボタンが押されたかどうか
        g_mouseInfo.mouseX                      // マウスのX座標の数値が格納されています！                          
----------------------------------------------------------------------------------
---------------------------------------------------------
image型 『g_pic』	

    説明しよう！ [画像の管理をしています！g_picの後に「.」を打つと、画像を持ってるメンバがいっぱい出てきます！]
----------------------------------------------------------------------------------
-------------------------------------------------------
key型 　『g_keyInfo』		

    説明しよう!  [キーボードが押されているかどうかがわかります！]

    メンバの紹介 {
        int oldKey, nowKey, keyFlg;}

    〜使い方〜
    if(g_keyInfo.nowKey & PAD_INPUT_A)  // Aボタンが押されたかどうか
----------------------------------------------------------------------------------
-------------------------------------------------------
int型 『g_gameScene』		

    説明しよう！  [ゲームのシーンを管理しているよ！これを変えないとゲーム画面が変わらないと思ってもいい！]

   // 0:ゲームタイトル 1:ステージセレクト 2:ゲームプレイ 3:ゲームオーバー 4:ゲームクリア 5:ステージクリア

    〜使い方〜
        g_gameScene = 0;   // ゲームタイトルへ移行
        これより・・・
        enumと一緒に使うとより分かりやすいぞ！！

     4/27 GameScene.hに書いてるぞ！
     GAME_TITLE,		 // ゲームタイトル
     GAME_SELECT,	 // ゲームセレクト
     GAME_PLAY,		 // ゲームプレイ
     GAME_OVER,		 // ゲームオーバー
     GAME_CLEAR,		 // ゲームクリア
     GAME_STAGE_CLEAR,// ゲームステージクリア

     g_gameScene = GAME_TITLE;   // ゲームタイトルへ移行

----------------------------------------------------------------------------------
・ g_controler;

・ g_button;

・ g_select_Stage;		//ステージをセレクト

・ g_enemy[ENEMY_MAX];	// 敵の情報

・ g_speedLevel;	    // スクロールレベルの設定を保存

・ g_boss[MAP_MAX];		//ボスの情報

・ g_enemybeat;			// エネミーを倒した数をカウントする

・ g_player;			// プレイヤーの情報

・ g_MutekiTime;		// プレイヤーの無敵時間

・ g_trap;				// トラップの情報

********************************************************************/